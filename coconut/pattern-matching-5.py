# Compiled Coconut: -----------------------------------------------------------

def factorial_variant_C(n):  #1 (line in Coconut source)
    _coconut_case_match_to_0 = n  #2 (line in Coconut source)
    _coconut_case_match_check_0 = False  #2 (line in Coconut source)
    if _coconut_case_match_to_0 == 0:  #2 (line in Coconut source)
        _coconut_case_match_check_0 = True  #2 (line in Coconut source)
    if _coconut_case_match_check_0:  #2 (line in Coconut source)
        return 1  #4 (line in Coconut source)
    if not _coconut_case_match_check_0:  #5 (line in Coconut source)
        if _coconut_case_match_to_0 == 1:  #5 (line in Coconut source)
            _coconut_case_match_check_0 = True  #5 (line in Coconut source)
        if _coconut_case_match_check_0:  #5 (line in Coconut source)
            return 1  #6 (line in Coconut source)
    if not _coconut_case_match_check_0:  #7 (line in Coconut source)
        _coconut_match_temp_0 = _coconut.getattr(int, "_coconut_is_data", False) or _coconut.isinstance(int, _coconut.tuple) and _coconut.all(_coconut.getattr(_coconut_x, "_coconut_is_data", False) for _coconut_x in int)  # type: ignore  #7 (line in Coconut source)
        _coconut_case_match_check_0 = True  #7 (line in Coconut source)
        if _coconut_case_match_check_0:  #7 (line in Coconut source)
            _coconut_case_match_check_0 = False  #7 (line in Coconut source)
            if not _coconut_case_match_check_0:  #7 (line in Coconut source)
                _coconut_match_set_name_x = _coconut_sentinel  #7 (line in Coconut source)
                if (_coconut_match_temp_0) and (_coconut.isinstance(_coconut_case_match_to_0, int)) and (_coconut.len(_coconut_case_match_to_0) >= 1):  #7 (line in Coconut source)
                    _coconut_match_set_name_x = _coconut_case_match_to_0[0]  #7 (line in Coconut source)
                    _coconut_match_temp_1 = _coconut.len(_coconut_case_match_to_0) <= _coconut.max(1, _coconut.len(_coconut_case_match_to_0.__match_args__)) and _coconut.all(i in _coconut.getattr(_coconut_case_match_to_0, "_coconut_data_defaults", {}) and _coconut_case_match_to_0[i] == _coconut.getattr(_coconut_case_match_to_0, "_coconut_data_defaults", {})[i] for i in _coconut.range(1, _coconut.len(_coconut_case_match_to_0.__match_args__))) if _coconut.hasattr(_coconut_case_match_to_0, "__match_args__") else _coconut.len(_coconut_case_match_to_0) == 1  # type: ignore  #7 (line in Coconut source)
                    if _coconut_match_temp_1:  #7 (line in Coconut source)
                        _coconut_case_match_check_0 = True  #7 (line in Coconut source)
                if _coconut_case_match_check_0:  #7 (line in Coconut source)
                    if _coconut_match_set_name_x is not _coconut_sentinel:  #7 (line in Coconut source)
                        x = _coconut_match_set_name_x  #7 (line in Coconut source)

            if not _coconut_case_match_check_0:  #7 (line in Coconut source)
                if (not _coconut_match_temp_0) and (_coconut.isinstance(_coconut_case_match_to_0, int)):  #7 (line in Coconut source)
                    _coconut_case_match_check_0 = True  #7 (line in Coconut source)
                if _coconut_case_match_check_0:  #7 (line in Coconut source)
                    _coconut_case_match_check_0 = False  #7 (line in Coconut source)
                    if not _coconut_case_match_check_0:  #7 (line in Coconut source)
                        _coconut_match_set_name_x = _coconut_sentinel  #7 (line in Coconut source)
                        if _coconut.type(_coconut_case_match_to_0) in _coconut_self_match_types:  #7 (line in Coconut source)
                            _coconut_match_set_name_x = _coconut_case_match_to_0  #7 (line in Coconut source)
                            _coconut_case_match_check_0 = True  #7 (line in Coconut source)
                        if _coconut_case_match_check_0:  #7 (line in Coconut source)
                            if _coconut_match_set_name_x is not _coconut_sentinel:  #7 (line in Coconut source)
                                x = _coconut_match_set_name_x  #7 (line in Coconut source)

                    if not _coconut_case_match_check_0:  #7 (line in Coconut source)
                        _coconut_match_set_name_x = _coconut_sentinel  #7 (line in Coconut source)
                        if not _coconut.type(_coconut_case_match_to_0) in _coconut_self_match_types:  #7 (line in Coconut source)
                            _coconut_match_temp_2 = _coconut.getattr(int, '__match_args__', ())  # type: _coconut.typing.Any  # type: ignore  #7 (line in Coconut source)
                            if not _coconut.isinstance(_coconut_match_temp_2, _coconut.tuple):  #7 (line in Coconut source)
                                raise _coconut.TypeError("int.__match_args__ must be a tuple")  #7 (line in Coconut source)
                            if _coconut.len(_coconut_match_temp_2) < 1:  #7 (line in Coconut source)
                                raise _coconut.TypeError("too many positional args in class match (pattern requires 1; 'int' only supports %s)" % (_coconut.len(_coconut_match_temp_2),))  #7 (line in Coconut source)
                            _coconut_match_temp_3 = _coconut.getattr(_coconut_case_match_to_0, _coconut_match_temp_2[0], _coconut_sentinel)  #7 (line in Coconut source)
                            if _coconut_match_temp_3 is not _coconut_sentinel:  #7 (line in Coconut source)
                                _coconut_match_set_name_x = _coconut_match_temp_3  #7 (line in Coconut source)
                                _coconut_case_match_check_0 = True  #7 (line in Coconut source)
                        if _coconut_case_match_check_0:  #7 (line in Coconut source)
                            if _coconut_match_set_name_x is not _coconut_sentinel:  #7 (line in Coconut source)
                                x = _coconut_match_set_name_x  #7 (line in Coconut source)




        if _coconut_case_match_check_0 and not (x > 1):  #7 (line in Coconut source)
            _coconut_case_match_check_0 = False  #7 (line in Coconut source)
        if _coconut_case_match_check_0:  #7 (line in Coconut source)
            return x * factorial_variant_C(x - 1)  #8 (line in Coconut source)
    if not _coconut_case_match_check_0:  #9 (line in Coconut source)
        raise TypeError("expecting integer >= 0")  #10 (line in Coconut source)


for n in range(11):  #12 (line in Coconut source)
    print("{n}!={f}".format(n=n, f=factorial_variant_C(n)))  #13 (line in Coconut source)
