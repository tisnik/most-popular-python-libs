# Compiled Coconut: -----------------------------------------------------------

class Complex(_coconut.object):  #1 (line in Coconut source)

    def __init__(self, real, imag):  #3 (line in Coconut source)
        self.real = real  #4 (line in Coconut source)
        self.imag = imag  #5 (line in Coconut source)


    @_coconut_tco  #7 (line in Coconut source)
    def __str__(self):  #7 (line in Coconut source)
        return _coconut_tail_call("Complex number {_coconut_format_0}+i{_coconut_format_1} represented as object".format, _coconut_format_0=(self.real), _coconut_format_1=(self.imag))  #8 (line in Coconut source)



_coconut_call_set_names(Complex)  #11 (line in Coconut source)
def test_number(value):  #11 (line in Coconut source)
    _coconut_case_match_to_0 = value  #12 (line in Coconut source)
    _coconut_case_match_check_0 = False  #12 (line in Coconut source)
    if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 2) and (_coconut_case_match_to_0[0] == 0) and (_coconut_case_match_to_0[1] == 0):  #12 (line in Coconut source)
        _coconut_case_match_check_0 = True  #12 (line in Coconut source)
    if _coconut_case_match_check_0:  #12 (line in Coconut source)
        print("Zero")  #14 (line in Coconut source)
    if not _coconut_case_match_check_0:  #15 (line in Coconut source)
        _coconut_match_set_name_real = _coconut_sentinel  #15 (line in Coconut source)
        if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 2) and (_coconut_case_match_to_0[1] == 0):  #15 (line in Coconut source)
            _coconut_match_set_name_real = _coconut_case_match_to_0[0]  #15 (line in Coconut source)
            _coconut_case_match_check_0 = True  #15 (line in Coconut source)
        if _coconut_case_match_check_0:  #15 (line in Coconut source)
            if _coconut_match_set_name_real is not _coconut_sentinel:  #15 (line in Coconut source)
                real = _coconut_match_set_name_real  #15 (line in Coconut source)
        if _coconut_case_match_check_0 and not (real > 0):  #15 (line in Coconut source)
            _coconut_case_match_check_0 = False  #15 (line in Coconut source)
        if _coconut_case_match_check_0:  #15 (line in Coconut source)
            print("Positive real number {_coconut_format_0}".format(_coconut_format_0=(real)))  #16 (line in Coconut source)
    if not _coconut_case_match_check_0:  #17 (line in Coconut source)
        _coconut_match_set_name_real = _coconut_sentinel  #17 (line in Coconut source)
        if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 2) and (_coconut_case_match_to_0[1] == 0):  #17 (line in Coconut source)
            _coconut_match_set_name_real = _coconut_case_match_to_0[0]  #17 (line in Coconut source)
            _coconut_case_match_check_0 = True  #17 (line in Coconut source)
        if _coconut_case_match_check_0:  #17 (line in Coconut source)
            if _coconut_match_set_name_real is not _coconut_sentinel:  #17 (line in Coconut source)
                real = _coconut_match_set_name_real  #17 (line in Coconut source)
        if _coconut_case_match_check_0:  #17 (line in Coconut source)
            print("Negative real number {_coconut_format_0}".format(_coconut_format_0=(real)))  #18 (line in Coconut source)
    if not _coconut_case_match_check_0:  #19 (line in Coconut source)
        _coconut_match_set_name_imag = _coconut_sentinel  #19 (line in Coconut source)
        if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 2) and (_coconut_case_match_to_0[0] == 0):  #19 (line in Coconut source)
            _coconut_match_set_name_imag = _coconut_case_match_to_0[1]  #19 (line in Coconut source)
            _coconut_case_match_check_0 = True  #19 (line in Coconut source)
        if _coconut_case_match_check_0:  #19 (line in Coconut source)
            if _coconut_match_set_name_imag is not _coconut_sentinel:  #19 (line in Coconut source)
                imag = _coconut_match_set_name_imag  #19 (line in Coconut source)
        if _coconut_case_match_check_0 and not (imag < 0):  #19 (line in Coconut source)
            _coconut_case_match_check_0 = False  #19 (line in Coconut source)
        if _coconut_case_match_check_0:  #19 (line in Coconut source)
            print("Negative imaginary number {_coconut_format_0}".format(_coconut_format_0=(imag)))  #20 (line in Coconut source)
    if not _coconut_case_match_check_0:  #21 (line in Coconut source)
        _coconut_match_set_name_imag = _coconut_sentinel  #21 (line in Coconut source)
        if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 2) and (_coconut_case_match_to_0[0] == 0):  #21 (line in Coconut source)
            _coconut_match_set_name_imag = _coconut_case_match_to_0[1]  #21 (line in Coconut source)
            _coconut_case_match_check_0 = True  #21 (line in Coconut source)
        if _coconut_case_match_check_0:  #21 (line in Coconut source)
            if _coconut_match_set_name_imag is not _coconut_sentinel:  #21 (line in Coconut source)
                imag = _coconut_match_set_name_imag  #21 (line in Coconut source)
        if _coconut_case_match_check_0:  #21 (line in Coconut source)
            print("Negative imaginary number {_coconut_format_0}".format(_coconut_format_0=(imag)))  #22 (line in Coconut source)
    if not _coconut_case_match_check_0:  #23 (line in Coconut source)
        _coconut_match_set_name_real = _coconut_sentinel  #23 (line in Coconut source)
        _coconut_match_set_name_imag = _coconut_sentinel  #23 (line in Coconut source)
        if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 2):  #23 (line in Coconut source)
            _coconut_match_set_name_real = _coconut_case_match_to_0[0]  #23 (line in Coconut source)
            _coconut_match_set_name_imag = _coconut_case_match_to_0[1]  #23 (line in Coconut source)
            _coconut_case_match_check_0 = True  #23 (line in Coconut source)
        if _coconut_case_match_check_0:  #23 (line in Coconut source)
            if _coconut_match_set_name_real is not _coconut_sentinel:  #23 (line in Coconut source)
                real = _coconut_match_set_name_real  #23 (line in Coconut source)
            if _coconut_match_set_name_imag is not _coconut_sentinel:  #23 (line in Coconut source)
                imag = _coconut_match_set_name_imag  #23 (line in Coconut source)
        if _coconut_case_match_check_0:  #23 (line in Coconut source)
            print("Complex number {_coconut_format_0}+i{_coconut_format_1}".format(_coconut_format_0=(real), _coconut_format_1=(imag)))  #24 (line in Coconut source)
    if not _coconut_case_match_check_0:  #25 (line in Coconut source)
        _coconut_match_temp_0 = _coconut.getattr(Complex, "_coconut_is_data", False) or _coconut.isinstance(Complex, _coconut.tuple) and _coconut.all(_coconut.getattr(_coconut_x, "_coconut_is_data", False) for _coconut_x in Complex)  # type: ignore  #25 (line in Coconut source)
        _coconut_case_match_check_0 = True  #25 (line in Coconut source)
        if _coconut_case_match_check_0:  #25 (line in Coconut source)
            _coconut_case_match_check_0 = False  #25 (line in Coconut source)
            if not _coconut_case_match_check_0:  #25 (line in Coconut source)
                if (_coconut_match_temp_0) and (_coconut.isinstance(_coconut_case_match_to_0, Complex)):  #25 (line in Coconut source)
                    _coconut_match_temp_1 = _coconut.len(_coconut_case_match_to_0) <= _coconut.max(0, _coconut.len(_coconut_case_match_to_0.__match_args__)) and _coconut.all(i in _coconut.getattr(_coconut_case_match_to_0, "_coconut_data_defaults", {}) and _coconut_case_match_to_0[i] == _coconut.getattr(_coconut_case_match_to_0, "_coconut_data_defaults", {})[i] for i in _coconut.range(0, _coconut.len(_coconut_case_match_to_0.__match_args__))) if _coconut.hasattr(_coconut_case_match_to_0, "__match_args__") else _coconut.len(_coconut_case_match_to_0) == 0  # type: ignore  #25 (line in Coconut source)
                    if _coconut_match_temp_1:  #25 (line in Coconut source)
                        _coconut_case_match_check_0 = True  #25 (line in Coconut source)

            if not _coconut_case_match_check_0:  #25 (line in Coconut source)
                if (not _coconut_match_temp_0) and (_coconut.isinstance(_coconut_case_match_to_0, Complex)):  #25 (line in Coconut source)
                    _coconut_case_match_check_0 = True  #25 (line in Coconut source)
                if _coconut_case_match_check_0:  #25 (line in Coconut source)
                    _coconut_case_match_check_0 = False  #25 (line in Coconut source)
                    if not _coconut_case_match_check_0:  #25 (line in Coconut source)
                        if _coconut.type(_coconut_case_match_to_0) in _coconut_self_match_types:  #25 (line in Coconut source)
                            _coconut_case_match_check_0 = True  #25 (line in Coconut source)

                    if not _coconut_case_match_check_0:  #25 (line in Coconut source)
                        if not _coconut.type(_coconut_case_match_to_0) in _coconut_self_match_types:  #25 (line in Coconut source)
                            _coconut_match_temp_2 = _coconut.getattr(Complex, '__match_args__', ())  # type: _coconut.typing.Any  # type: ignore  #25 (line in Coconut source)
                            if not _coconut.isinstance(_coconut_match_temp_2, _coconut.tuple):  #25 (line in Coconut source)
                                raise _coconut.TypeError("Complex.__match_args__ must be a tuple")  #25 (line in Coconut source)
                            if _coconut.len(_coconut_match_temp_2) < 0:  #25 (line in Coconut source)
                                raise _coconut.TypeError("too many positional args in class match (pattern requires 0; 'Complex' only supports %s)" % (_coconut.len(_coconut_match_temp_2),))  #25 (line in Coconut source)
                            _coconut_case_match_check_0 = True  #25 (line in Coconut source)




        if _coconut_case_match_check_0:  #25 (line in Coconut source)
            print(value)  #26 (line in Coconut source)
    if not _coconut_case_match_check_0:  #27 (line in Coconut source)
        _coconut_case_match_check_0 = True  #27 (line in Coconut source)
        if _coconut_case_match_check_0:  #27 (line in Coconut source)
            raise ValueError("Not a complex number")  #28 (line in Coconut source)



test_number((0, 0))  #31 (line in Coconut source)
test_number((1, 0))  #32 (line in Coconut source)
test_number((-1, 0))  #33 (line in Coconut source)
test_number((0, 1))  #34 (line in Coconut source)
test_number((0, -1))  #35 (line in Coconut source)
test_number((1, 1))  #36 (line in Coconut source)

test_number(Complex(0, 0))  #38 (line in Coconut source)
test_number(Complex(1, 0))  #39 (line in Coconut source)
test_number(Complex(-1, 0))  #40 (line in Coconut source)
test_number(Complex(0, 1))  #41 (line in Coconut source)
test_number(Complex(0, -1))  #42 (line in Coconut source)
test_number(Complex(1, 1))  #43 (line in Coconut source)
