# Compiled Coconut: -----------------------------------------------------------

@_coconut_tco  #1 (line in Coconut source)
def list_type(x):  #1 (line in Coconut source)
    _coconut_case_match_to_0 = x  #2 (line in Coconut source)
    _coconut_case_match_check_0 = False  #2 (line in Coconut source)
    _coconut_match_set_name_a = _coconut_sentinel  #2 (line in Coconut source)
    _coconut_match_set_name_b = _coconut_sentinel  #2 (line in Coconut source)
    if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 2):  #2 (line in Coconut source)
        _coconut_match_set_name_a = _coconut_case_match_to_0[0]  #2 (line in Coconut source)
        _coconut_match_set_name_b = _coconut_case_match_to_0[1]  #2 (line in Coconut source)
        _coconut_case_match_check_0 = True  #2 (line in Coconut source)
    if _coconut_case_match_check_0:  #2 (line in Coconut source)
        if _coconut_match_set_name_a is not _coconut_sentinel:  #2 (line in Coconut source)
            a = _coconut_match_set_name_a  #2 (line in Coconut source)
        if _coconut_match_set_name_b is not _coconut_sentinel:  #2 (line in Coconut source)
            b = _coconut_match_set_name_b  #2 (line in Coconut source)
    if _coconut_case_match_check_0:  #2 (line in Coconut source)
        return _coconut_tail_call("list with two items: {_coconut_format_0} and {_coconut_format_1}".format, _coconut_format_0=(a), _coconut_format_1=(b))  #4 (line in Coconut source)
    if not _coconut_case_match_check_0:  #5 (line in Coconut source)
        _coconut_match_set_name_a = _coconut_sentinel  #5 (line in Coconut source)
        if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 1):  #5 (line in Coconut source)
            _coconut_match_set_name_a = _coconut_case_match_to_0[0]  #5 (line in Coconut source)
            _coconut_case_match_check_0 = True  #5 (line in Coconut source)
        if _coconut_case_match_check_0:  #5 (line in Coconut source)
            if _coconut_match_set_name_a is not _coconut_sentinel:  #5 (line in Coconut source)
                a = _coconut_match_set_name_a  #5 (line in Coconut source)
        if _coconut_case_match_check_0:  #5 (line in Coconut source)
            return _coconut_tail_call("list with one item: {_coconut_format_0}".format, _coconut_format_0=(a))  #6 (line in Coconut source)
    if not _coconut_case_match_check_0:  #7 (line in Coconut source)
        if (_coconut.isinstance(_coconut_case_match_to_0, _coconut.abc.Sequence)) and (_coconut.len(_coconut_case_match_to_0) == 0):  #7 (line in Coconut source)
            _coconut_case_match_check_0 = True  #7 (line in Coconut source)
        if _coconut_case_match_check_0:  #7 (line in Coconut source)
            return "empty list"  #8 (line in Coconut source)
    if not _coconut_case_match_check_0:  #9 (line in Coconut source)
        _coconut_match_temp_0 = _coconut.getattr(list, "_coconut_is_data", False) or _coconut.isinstance(list, _coconut.tuple) and _coconut.all(_coconut.getattr(_coconut_x, "_coconut_is_data", False) for _coconut_x in list)  # type: ignore  #9 (line in Coconut source)
        _coconut_case_match_check_0 = True  #9 (line in Coconut source)
        if _coconut_case_match_check_0:  #9 (line in Coconut source)
            _coconut_case_match_check_0 = False  #9 (line in Coconut source)
            if not _coconut_case_match_check_0:  #9 (line in Coconut source)
                _coconut_match_set_name_lst = _coconut_sentinel  #9 (line in Coconut source)
                if (_coconut_match_temp_0) and (_coconut.isinstance(_coconut_case_match_to_0, list)) and (_coconut.len(_coconut_case_match_to_0) >= 1):  #9 (line in Coconut source)
                    _coconut_match_set_name_lst = _coconut_case_match_to_0[0]  #9 (line in Coconut source)
                    _coconut_match_temp_1 = _coconut.len(_coconut_case_match_to_0) <= _coconut.max(1, _coconut.len(_coconut_case_match_to_0.__match_args__)) and _coconut.all(i in _coconut.getattr(_coconut_case_match_to_0, "_coconut_data_defaults", {}) and _coconut_case_match_to_0[i] == _coconut.getattr(_coconut_case_match_to_0, "_coconut_data_defaults", {})[i] for i in _coconut.range(1, _coconut.len(_coconut_case_match_to_0.__match_args__))) if _coconut.hasattr(_coconut_case_match_to_0, "__match_args__") else _coconut.len(_coconut_case_match_to_0) == 1  # type: ignore  #9 (line in Coconut source)
                    if _coconut_match_temp_1:  #9 (line in Coconut source)
                        _coconut_case_match_check_0 = True  #9 (line in Coconut source)
                if _coconut_case_match_check_0:  #9 (line in Coconut source)
                    if _coconut_match_set_name_lst is not _coconut_sentinel:  #9 (line in Coconut source)
                        lst = _coconut_match_set_name_lst  #9 (line in Coconut source)

            if not _coconut_case_match_check_0:  #9 (line in Coconut source)
                if (not _coconut_match_temp_0) and (_coconut.isinstance(_coconut_case_match_to_0, list)):  #9 (line in Coconut source)
                    _coconut_case_match_check_0 = True  #9 (line in Coconut source)
                if _coconut_case_match_check_0:  #9 (line in Coconut source)
                    _coconut_case_match_check_0 = False  #9 (line in Coconut source)
                    if not _coconut_case_match_check_0:  #9 (line in Coconut source)
                        _coconut_match_set_name_lst = _coconut_sentinel  #9 (line in Coconut source)
                        if _coconut.type(_coconut_case_match_to_0) in _coconut_self_match_types:  #9 (line in Coconut source)
                            _coconut_match_set_name_lst = _coconut_case_match_to_0  #9 (line in Coconut source)
                            _coconut_case_match_check_0 = True  #9 (line in Coconut source)
                        if _coconut_case_match_check_0:  #9 (line in Coconut source)
                            if _coconut_match_set_name_lst is not _coconut_sentinel:  #9 (line in Coconut source)
                                lst = _coconut_match_set_name_lst  #9 (line in Coconut source)

                    if not _coconut_case_match_check_0:  #9 (line in Coconut source)
                        _coconut_match_set_name_lst = _coconut_sentinel  #9 (line in Coconut source)
                        if not _coconut.type(_coconut_case_match_to_0) in _coconut_self_match_types:  #9 (line in Coconut source)
                            _coconut_match_temp_2 = _coconut.getattr(list, '__match_args__', ())  # type: _coconut.typing.Any  # type: ignore  #9 (line in Coconut source)
                            if not _coconut.isinstance(_coconut_match_temp_2, _coconut.tuple):  #9 (line in Coconut source)
                                raise _coconut.TypeError("list.__match_args__ must be a tuple")  #9 (line in Coconut source)
                            if _coconut.len(_coconut_match_temp_2) < 1:  #9 (line in Coconut source)
                                raise _coconut.TypeError("too many positional args in class match (pattern requires 1; 'list' only supports %s)" % (_coconut.len(_coconut_match_temp_2),))  #9 (line in Coconut source)
                            _coconut_match_temp_3 = _coconut.getattr(_coconut_case_match_to_0, _coconut_match_temp_2[0], _coconut_sentinel)  #9 (line in Coconut source)
                            if _coconut_match_temp_3 is not _coconut_sentinel:  #9 (line in Coconut source)
                                _coconut_match_set_name_lst = _coconut_match_temp_3  #9 (line in Coconut source)
                                _coconut_case_match_check_0 = True  #9 (line in Coconut source)
                        if _coconut_case_match_check_0:  #9 (line in Coconut source)
                            if _coconut_match_set_name_lst is not _coconut_sentinel:  #9 (line in Coconut source)
                                lst = _coconut_match_set_name_lst  #9 (line in Coconut source)




        if _coconut_case_match_check_0:  #9 (line in Coconut source)
            return _coconut_tail_call("list with {_coconut_format_0} items".format, _coconut_format_0=(len(lst)))  #10 (line in Coconut source)
    if not _coconut_case_match_check_0:  #11 (line in Coconut source)
        return "wrong type"  #12 (line in Coconut source)



print(list_type([]))  #15 (line in Coconut source)
print(list_type(["x",]))  #16 (line in Coconut source)
print(list_type(["x", "y"]))  #17 (line in Coconut source)
print(list_type(["x", "y", "z"]))  #18 (line in Coconut source)
print(list_type("foo"))  #19 (line in Coconut source)
