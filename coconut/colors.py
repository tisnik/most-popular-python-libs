# Compiled Coconut: -----------------------------------------------------------

try:  #1 (line in Coconut source)
    _coconut_sys_0 = sys  # type: ignore  #1 (line in Coconut source)
except _coconut.NameError:  #1 (line in Coconut source)
    _coconut_sys_0 = _coconut_sentinel  #1 (line in Coconut source)
sys = _coconut_sys  #1 (line in Coconut source)
if sys.version_info >= (3, 4):  #1 (line in Coconut source)
    from enum import Enum  #1 (line in Coconut source)
else:  #1 (line in Coconut source)
    from aenum import Enum  #1 (line in Coconut source)
if _coconut_sys_0 is not _coconut_sentinel:  #1 (line in Coconut source)
    sys = _coconut_sys_0  #1 (line in Coconut source)


class BasicColor(Enum):  #4 (line in Coconut source)
    """Základních osm barev."""  #5 (line in Coconut source)
    BLACK = (0, 0, 0)  #6 (line in Coconut source)
    RED = (255, 0, 0)  #7 (line in Coconut source)
    GREEN = (0, 255, 0)  #8 (line in Coconut source)
    YELLOW = (255, 255, 0)  #9 (line in Coconut source)
    BLUE = (0, 0, 255)  #10 (line in Coconut source)
    MAGENTA = (255, 0, 255)  #11 (line in Coconut source)
    CYAN = (0, 255, 255)  #12 (line in Coconut source)
    WHITE = (255, 255, 255)  #13 (line in Coconut source)


_coconut_call_set_names(BasicColor)  #16 (line in Coconut source)
class Gray(_coconut.typing.NamedTuple("Gray", [("gray", 'int')]), _coconut.object):  #16 (line in Coconut source)
    """Reprezentace odstínu šedi celočíselnou hodnotou 0..255."""  #17 (line in Coconut source)


    __slots__ = ()  #20 (line in Coconut source)
    _coconut_is_data = True  #20 (line in Coconut source)
    __match_args__ = ('gray',)  #20 (line in Coconut source)
    def __add__(self, other): return _coconut.NotImplemented  #20 (line in Coconut source)
    def __mul__(self, other): return _coconut.NotImplemented  #20 (line in Coconut source)
    def __rmul__(self, other): return _coconut.NotImplemented  #20 (line in Coconut source)
    __ne__ = _coconut.object.__ne__  #20 (line in Coconut source)
    def __eq__(self, other):  #20 (line in Coconut source)
        return self.__class__ is other.__class__ and _coconut.tuple.__eq__(self, other)  #20 (line in Coconut source)
    def __hash__(self):  #20 (line in Coconut source)
        return _coconut.tuple.__hash__(self) ^ hash(self.__class__)  #20 (line in Coconut source)
_coconut_call_set_names(Gray)  #20 (line in Coconut source)
class RGB(_coconut.typing.NamedTuple("RGB", [("red", 'int'), ("green", 'int'), ("blue", 'int')]), _coconut.object):  #20 (line in Coconut source)
    """Reprezentace barvy v barvovém prostoru RGB."""  #21 (line in Coconut source)


    __slots__ = ()  #24 (line in Coconut source)
    _coconut_is_data = True  #24 (line in Coconut source)
    __match_args__ = ('red', 'green', 'blue')  #24 (line in Coconut source)
    def __add__(self, other): return _coconut.NotImplemented  #24 (line in Coconut source)
    def __mul__(self, other): return _coconut.NotImplemented  #24 (line in Coconut source)
    def __rmul__(self, other): return _coconut.NotImplemented  #24 (line in Coconut source)
    __ne__ = _coconut.object.__ne__  #24 (line in Coconut source)
    def __eq__(self, other):  #24 (line in Coconut source)
        return self.__class__ is other.__class__ and _coconut.tuple.__eq__(self, other)  #24 (line in Coconut source)
    def __hash__(self):  #24 (line in Coconut source)
        return _coconut.tuple.__hash__(self) ^ hash(self.__class__)  #24 (line in Coconut source)
_coconut_call_set_names(RGB)  #24 (line in Coconut source)
class HSV(_coconut.typing.NamedTuple("HSV", [("hue", 'float'), ("saturation", 'float'), ("value", 'float')]), _coconut.object):  #24 (line in Coconut source)
    """Reprezentace barvy v barvovém prostoru HSV."""  #25 (line in Coconut source)


    __slots__ = ()  #28 (line in Coconut source)
    _coconut_is_data = True  #28 (line in Coconut source)
    __match_args__ = ('hue', 'saturation', 'value')  #28 (line in Coconut source)
    def __add__(self, other): return _coconut.NotImplemented  #28 (line in Coconut source)
    def __mul__(self, other): return _coconut.NotImplemented  #28 (line in Coconut source)
    def __rmul__(self, other): return _coconut.NotImplemented  #28 (line in Coconut source)
    __ne__ = _coconut.object.__ne__  #28 (line in Coconut source)
    def __eq__(self, other):  #28 (line in Coconut source)
        return self.__class__ is other.__class__ and _coconut.tuple.__eq__(self, other)  #28 (line in Coconut source)
    def __hash__(self):  #28 (line in Coconut source)
        return _coconut.tuple.__hash__(self) ^ hash(self.__class__)  #28 (line in Coconut source)
_coconut_call_set_names(HSV)  #28 (line in Coconut source)
@_coconut_tco  #28 (line in Coconut source)
def scale_rgb(r,  # type: int  #28 (line in Coconut source)
    g,  # type: int  #28 (line in Coconut source)
    b  # type: int  #28 (line in Coconut source)
    ):  #28 (line in Coconut source)
# type: (...) -> RGB
    """Převod hodnot z rozsahu 0.0-1.0 na celočíselný rozsah 0..255."""  #29 (line in Coconut source)
    return _coconut_tail_call(RGB, int(255 * r), int(255 * g), int(255 * b))  #30 (line in Coconut source)


# Převod barvy z barvového prostoru HSV do prostoru RGB

try:  #34 (line in Coconut source)
    _coconut_addpattern_0 = _coconut_addpattern(hsv_to_rgb)  # type: ignore  #34 (line in Coconut source)
except _coconut.NameError:  #34 (line in Coconut source)
    _coconut_addpattern_0 = lambda f: f  #34 (line in Coconut source)
@_coconut_addpattern_0  #34 (line in Coconut source)
@_coconut_tco  #34 (line in Coconut source)
@_coconut_mark_as_match  #34 (line in Coconut source)
def hsv_to_rgb(_coconut_match_first_arg=_coconut_sentinel, *_coconut_match_args, **_coconut_match_kwargs):  #34 (line in Coconut source)
    _coconut_match_check_0 = False  #34 (line in Coconut source)
    _coconut_match_set_name_hue = _coconut_sentinel  #34 (line in Coconut source)
    _coconut_match_set_name_value = _coconut_sentinel  #34 (line in Coconut source)
    _coconut_FunctionMatchError = _coconut_get_function_match_error()  #34 (line in Coconut source)
    if _coconut_match_first_arg is not _coconut_sentinel:  #34 (line in Coconut source)
        _coconut_match_args = (_coconut_match_first_arg,) + _coconut_match_args  #34 (line in Coconut source)
    if (2 <= _coconut.len(_coconut_match_args) <= 3) and ("hue" not in _coconut_match_kwargs) and (_coconut.sum((_coconut.len(_coconut_match_args) > 2, "value" in _coconut_match_kwargs)) == 1):  #34 (line in Coconut source)
        if _coconut_match_args[1] == 0.0:  #34 (line in Coconut source)
            _coconut_match_temp_0 = _coconut_match_args[0] if _coconut.len(_coconut_match_args) > 0 else _coconut_match_kwargs.pop("hue")  #34 (line in Coconut source)
            _coconut_match_temp_1 = _coconut_match_args[2] if _coconut.len(_coconut_match_args) > 2 else _coconut_match_kwargs.pop("value")  #34 (line in Coconut source)
            _coconut_match_set_name_hue = _coconut_match_temp_0  #34 (line in Coconut source)
            _coconut_match_set_name_value = _coconut_match_temp_1  #34 (line in Coconut source)
            if not _coconut_match_kwargs:  #34 (line in Coconut source)
                _coconut_match_check_0 = True  #34 (line in Coconut source)
    if _coconut_match_check_0:  #34 (line in Coconut source)
        if _coconut_match_set_name_hue is not _coconut_sentinel:  #34 (line in Coconut source)
            hue = _coconut_match_set_name_hue  #34 (line in Coconut source)
        if _coconut_match_set_name_value is not _coconut_sentinel:  #34 (line in Coconut source)
            value = _coconut_match_set_name_value  #34 (line in Coconut source)
    if not _coconut_match_check_0:  #34 (line in Coconut source)
        raise _coconut_FunctionMatchError('addpattern def hsv_to_rgb(hue, 0.0, value) =  scale_rgb(value, value, value)', _coconut_match_args)  #34 (line in Coconut source)

    return _coconut_tail_call(scale_rgb, value, value, value)  #34 (line in Coconut source)


try:  #36 (line in Coconut source)
    _coconut_addpattern_1 = _coconut_addpattern(hsv_to_rgb)  # type: ignore  #36 (line in Coconut source)
except _coconut.NameError:  #36 (line in Coconut source)
    _coconut_addpattern_1 = lambda f: f  #36 (line in Coconut source)
@_coconut_addpattern_1  #36 (line in Coconut source)
@_coconut_tco  #36 (line in Coconut source)
@_coconut_mark_as_match  #36 (line in Coconut source)
def hsv_to_rgb(_coconut_match_first_arg=_coconut_sentinel, *_coconut_match_args, **_coconut_match_kwargs):  #36 (line in Coconut source)
    """Pomocná funkce pro výpočet hodnot RGB."""  #37 (line in Coconut source)
    _coconut_match_check_1 = False  #38 (line in Coconut source)
    _coconut_match_set_name_hue = _coconut_sentinel  #38 (line in Coconut source)
    _coconut_match_set_name_saturation = _coconut_sentinel  #38 (line in Coconut source)
    _coconut_match_set_name_value = _coconut_sentinel  #38 (line in Coconut source)
    _coconut_FunctionMatchError = _coconut_get_function_match_error()  #38 (line in Coconut source)
    if _coconut_match_first_arg is not _coconut_sentinel:  #38 (line in Coconut source)
        _coconut_match_args = (_coconut_match_first_arg,) + _coconut_match_args  #38 (line in Coconut source)
    if (_coconut.len(_coconut_match_args) <= 3) and (_coconut.sum((_coconut.len(_coconut_match_args) > 0, "hue" in _coconut_match_kwargs)) == 1) and (_coconut.sum((_coconut.len(_coconut_match_args) > 1, "saturation" in _coconut_match_kwargs)) == 1) and (_coconut.sum((_coconut.len(_coconut_match_args) > 2, "value" in _coconut_match_kwargs)) == 1):  #38 (line in Coconut source)
        _coconut_match_temp_2 = _coconut_match_args[0] if _coconut.len(_coconut_match_args) > 0 else _coconut_match_kwargs.pop("hue")  #38 (line in Coconut source)
        _coconut_match_temp_3 = _coconut_match_args[1] if _coconut.len(_coconut_match_args) > 1 else _coconut_match_kwargs.pop("saturation")  #38 (line in Coconut source)
        _coconut_match_temp_4 = _coconut_match_args[2] if _coconut.len(_coconut_match_args) > 2 else _coconut_match_kwargs.pop("value")  #38 (line in Coconut source)
        _coconut_match_set_name_hue = _coconut_match_temp_2  #38 (line in Coconut source)
        _coconut_match_set_name_saturation = _coconut_match_temp_3  #38 (line in Coconut source)
        _coconut_match_set_name_value = _coconut_match_temp_4  #38 (line in Coconut source)
        if not _coconut_match_kwargs:  #38 (line in Coconut source)
            _coconut_match_check_1 = True  #38 (line in Coconut source)
    if _coconut_match_check_1:  #38 (line in Coconut source)
        if _coconut_match_set_name_hue is not _coconut_sentinel:  #38 (line in Coconut source)
            hue = _coconut_match_set_name_hue  #38 (line in Coconut source)
        if _coconut_match_set_name_saturation is not _coconut_sentinel:  #38 (line in Coconut source)
            saturation = _coconut_match_set_name_saturation  #38 (line in Coconut source)
        if _coconut_match_set_name_value is not _coconut_sentinel:  #38 (line in Coconut source)
            value = _coconut_match_set_name_value  #38 (line in Coconut source)
    if not _coconut_match_check_1:  #38 (line in Coconut source)
        raise _coconut_FunctionMatchError('addpattern def hsv_to_rgb(hue, saturation, value):', _coconut_match_args)  #38 (line in Coconut source)

    if hue == 1.0:  #38 (line in Coconut source)
        hue = 0.0  #39 (line in Coconut source)
    i = int(hue * 6.0)  #40 (line in Coconut source)
    f = hue * 6.0 - i  #41 (line in Coconut source)

    w = value * (1.0 - saturation)  #43 (line in Coconut source)
    q = value * (1.0 - saturation * f)  #44 (line in Coconut source)
    t = value * (1.0 - saturation * (1.0 - f))  #45 (line in Coconut source)

    _coconut_case_match_to_0 = i  #47 (line in Coconut source)
    _coconut_case_match_check_0 = False  #47 (line in Coconut source)
    if _coconut_case_match_to_0 == 0:  #47 (line in Coconut source)
        _coconut_case_match_check_0 = True  #47 (line in Coconut source)
    if _coconut_case_match_check_0:  #47 (line in Coconut source)
        return _coconut_tail_call(scale_rgb, value, t, w)  #49 (line in Coconut source)
    if not _coconut_case_match_check_0:  #50 (line in Coconut source)
        if _coconut_case_match_to_0 == 1:  #50 (line in Coconut source)
            _coconut_case_match_check_0 = True  #50 (line in Coconut source)
        if _coconut_case_match_check_0:  #50 (line in Coconut source)
            return _coconut_tail_call(scale_rgb, q, value, w)  #51 (line in Coconut source)
    if not _coconut_case_match_check_0:  #52 (line in Coconut source)
        if _coconut_case_match_to_0 == 2:  #52 (line in Coconut source)
            _coconut_case_match_check_0 = True  #52 (line in Coconut source)
        if _coconut_case_match_check_0:  #52 (line in Coconut source)
            return _coconut_tail_call(scale_rgb, w, value, t)  #53 (line in Coconut source)
    if not _coconut_case_match_check_0:  #54 (line in Coconut source)
        if _coconut_case_match_to_0 == 3:  #54 (line in Coconut source)
            _coconut_case_match_check_0 = True  #54 (line in Coconut source)
        if _coconut_case_match_check_0:  #54 (line in Coconut source)
            return _coconut_tail_call(scale_rgb, w, q, value)  #55 (line in Coconut source)
    if not _coconut_case_match_check_0:  #56 (line in Coconut source)
        if _coconut_case_match_to_0 == 4:  #56 (line in Coconut source)
            _coconut_case_match_check_0 = True  #56 (line in Coconut source)
        if _coconut_case_match_check_0:  #56 (line in Coconut source)
            return _coconut_tail_call(scale_rgb, t, w, value)  #57 (line in Coconut source)
    if not _coconut_case_match_check_0:  #58 (line in Coconut source)
        if _coconut_case_match_to_0 == 5:  #58 (line in Coconut source)
            _coconut_case_match_check_0 = True  #58 (line in Coconut source)
        if _coconut_case_match_check_0:  #58 (line in Coconut source)
            return _coconut_tail_call(scale_rgb, value, w, q)  #59 (line in Coconut source)



@_coconut_tco  #62 (line in Coconut source)
def to_rgb(color):  #62 (line in Coconut source)
# type: (...) -> RGB
    """Převod barvy z jakékoli podporované reprezentace do prostoru RGB."""  #63 (line in Coconut source)
    _coconut_case_match_to_1 = color  #64 (line in Coconut source)
    _coconut_case_match_check_1 = False  #64 (line in Coconut source)
    _coconut_match_temp_5 = _coconut.getattr(Gray, "_coconut_is_data", False) or _coconut.isinstance(Gray, _coconut.tuple) and _coconut.all(_coconut.getattr(_coconut_x, "_coconut_is_data", False) for _coconut_x in Gray)  # type: ignore  #64 (line in Coconut source)
    _coconut_case_match_check_1 = True  #64 (line in Coconut source)
    if _coconut_case_match_check_1:  #64 (line in Coconut source)
        _coconut_case_match_check_1 = False  #64 (line in Coconut source)
        if not _coconut_case_match_check_1:  #64 (line in Coconut source)
            _coconut_match_set_name_gray = _coconut_sentinel  #64 (line in Coconut source)
            if (_coconut_match_temp_5) and (_coconut.isinstance(_coconut_case_match_to_1, Gray)) and (_coconut.len(_coconut_case_match_to_1) >= 1):  #64 (line in Coconut source)
                _coconut_match_set_name_gray = _coconut_case_match_to_1[0]  #64 (line in Coconut source)
                _coconut_match_temp_6 = _coconut.len(_coconut_case_match_to_1) <= _coconut.max(1, _coconut.len(_coconut_case_match_to_1.__match_args__)) and _coconut.all(i in _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {}) and _coconut_case_match_to_1[i] == _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {})[i] for i in _coconut.range(1, _coconut.len(_coconut_case_match_to_1.__match_args__))) if _coconut.hasattr(_coconut_case_match_to_1, "__match_args__") else _coconut.len(_coconut_case_match_to_1) == 1  # type: ignore  #64 (line in Coconut source)
                if _coconut_match_temp_6:  #64 (line in Coconut source)
                    _coconut_case_match_check_1 = True  #64 (line in Coconut source)
            if _coconut_case_match_check_1:  #64 (line in Coconut source)
                if _coconut_match_set_name_gray is not _coconut_sentinel:  #64 (line in Coconut source)
                    gray = _coconut_match_set_name_gray  #64 (line in Coconut source)

        if not _coconut_case_match_check_1:  #64 (line in Coconut source)
            if (not _coconut_match_temp_5) and (_coconut.isinstance(_coconut_case_match_to_1, Gray)):  #64 (line in Coconut source)
                _coconut_case_match_check_1 = True  #64 (line in Coconut source)
            if _coconut_case_match_check_1:  #64 (line in Coconut source)
                _coconut_case_match_check_1 = False  #64 (line in Coconut source)
                if not _coconut_case_match_check_1:  #64 (line in Coconut source)
                    _coconut_match_set_name_gray = _coconut_sentinel  #64 (line in Coconut source)
                    if _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #64 (line in Coconut source)
                        _coconut_match_set_name_gray = _coconut_case_match_to_1  #64 (line in Coconut source)
                        _coconut_case_match_check_1 = True  #64 (line in Coconut source)
                    if _coconut_case_match_check_1:  #64 (line in Coconut source)
                        if _coconut_match_set_name_gray is not _coconut_sentinel:  #64 (line in Coconut source)
                            gray = _coconut_match_set_name_gray  #64 (line in Coconut source)

                if not _coconut_case_match_check_1:  #64 (line in Coconut source)
                    _coconut_match_set_name_gray = _coconut_sentinel  #64 (line in Coconut source)
                    if not _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #64 (line in Coconut source)
                        _coconut_match_temp_7 = _coconut.getattr(Gray, '__match_args__', ())  # type: _coconut.typing.Any  # type: ignore  #64 (line in Coconut source)
                        if not _coconut.isinstance(_coconut_match_temp_7, _coconut.tuple):  #64 (line in Coconut source)
                            raise _coconut.TypeError("Gray.__match_args__ must be a tuple")  #64 (line in Coconut source)
                        if _coconut.len(_coconut_match_temp_7) < 1:  #64 (line in Coconut source)
                            raise _coconut.TypeError("too many positional args in class match (pattern requires 1; 'Gray' only supports %s)" % (_coconut.len(_coconut_match_temp_7),))  #64 (line in Coconut source)
                        _coconut_match_temp_8 = _coconut.getattr(_coconut_case_match_to_1, _coconut_match_temp_7[0], _coconut_sentinel)  #64 (line in Coconut source)
                        if _coconut_match_temp_8 is not _coconut_sentinel:  #64 (line in Coconut source)
                            _coconut_match_set_name_gray = _coconut_match_temp_8  #64 (line in Coconut source)
                            _coconut_case_match_check_1 = True  #64 (line in Coconut source)
                    if _coconut_case_match_check_1:  #64 (line in Coconut source)
                        if _coconut_match_set_name_gray is not _coconut_sentinel:  #64 (line in Coconut source)
                            gray = _coconut_match_set_name_gray  #64 (line in Coconut source)




    if _coconut_case_match_check_1:  #64 (line in Coconut source)
        return _coconut_tail_call(RGB, gray, gray, gray)  #66 (line in Coconut source)
    if not _coconut_case_match_check_1:  #67 (line in Coconut source)
        _coconut_match_set_name_rgb = _coconut_sentinel  #67 (line in Coconut source)
        _coconut_match_set_name_rgb = _coconut_case_match_to_1  #67 (line in Coconut source)
        _coconut_match_temp_9 = _coconut.getattr(RGB, "_coconut_is_data", False) or _coconut.isinstance(RGB, _coconut.tuple) and _coconut.all(_coconut.getattr(_coconut_x, "_coconut_is_data", False) for _coconut_x in RGB)  # type: ignore  #67 (line in Coconut source)
        _coconut_case_match_check_1 = True  #67 (line in Coconut source)
        if _coconut_case_match_check_1:  #67 (line in Coconut source)
            _coconut_case_match_check_1 = False  #67 (line in Coconut source)
            if not _coconut_case_match_check_1:  #67 (line in Coconut source)
                _coconut_match_set_name_red = _coconut_sentinel  #67 (line in Coconut source)
                _coconut_match_set_name_green = _coconut_sentinel  #67 (line in Coconut source)
                _coconut_match_set_name_blue = _coconut_sentinel  #67 (line in Coconut source)
                if (_coconut_match_temp_9) and (_coconut.isinstance(_coconut_case_match_to_1, RGB)) and (_coconut.len(_coconut_case_match_to_1) >= 3):  #67 (line in Coconut source)
                    _coconut_match_set_name_red = _coconut_case_match_to_1[0]  #67 (line in Coconut source)
                    _coconut_match_set_name_green = _coconut_case_match_to_1[1]  #67 (line in Coconut source)
                    _coconut_match_set_name_blue = _coconut_case_match_to_1[2]  #67 (line in Coconut source)
                    _coconut_match_temp_10 = _coconut.len(_coconut_case_match_to_1) <= _coconut.max(3, _coconut.len(_coconut_case_match_to_1.__match_args__)) and _coconut.all(i in _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {}) and _coconut_case_match_to_1[i] == _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {})[i] for i in _coconut.range(3, _coconut.len(_coconut_case_match_to_1.__match_args__))) if _coconut.hasattr(_coconut_case_match_to_1, "__match_args__") else _coconut.len(_coconut_case_match_to_1) == 3  # type: ignore  #67 (line in Coconut source)
                    if _coconut_match_temp_10:  #67 (line in Coconut source)
                        _coconut_case_match_check_1 = True  #67 (line in Coconut source)
                if _coconut_case_match_check_1:  #67 (line in Coconut source)
                    if _coconut_match_set_name_red is not _coconut_sentinel:  #67 (line in Coconut source)
                        red = _coconut_match_set_name_red  #67 (line in Coconut source)
                    if _coconut_match_set_name_green is not _coconut_sentinel:  #67 (line in Coconut source)
                        green = _coconut_match_set_name_green  #67 (line in Coconut source)
                    if _coconut_match_set_name_blue is not _coconut_sentinel:  #67 (line in Coconut source)
                        blue = _coconut_match_set_name_blue  #67 (line in Coconut source)

            if not _coconut_case_match_check_1:  #67 (line in Coconut source)
                if (not _coconut_match_temp_9) and (_coconut.isinstance(_coconut_case_match_to_1, RGB)):  #67 (line in Coconut source)
                    _coconut_case_match_check_1 = True  #67 (line in Coconut source)
                if _coconut_case_match_check_1:  #67 (line in Coconut source)
                    _coconut_case_match_check_1 = False  #67 (line in Coconut source)
                    if not _coconut_case_match_check_1:  #67 (line in Coconut source)
                        if _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #67 (line in Coconut source)
                            raise _coconut.TypeError("too many positional args in class match (pattern requires 3; 'RGB' only supports 1)")  #67 (line in Coconut source)
                            _coconut_case_match_check_1 = True  #67 (line in Coconut source)

                    if not _coconut_case_match_check_1:  #67 (line in Coconut source)
                        _coconut_match_set_name_red = _coconut_sentinel  #67 (line in Coconut source)
                        _coconut_match_set_name_green = _coconut_sentinel  #67 (line in Coconut source)
                        _coconut_match_set_name_blue = _coconut_sentinel  #67 (line in Coconut source)
                        if not _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #67 (line in Coconut source)
                            _coconut_match_temp_11 = _coconut.getattr(RGB, '__match_args__', ())  # type: _coconut.typing.Any  # type: ignore  #67 (line in Coconut source)
                            if not _coconut.isinstance(_coconut_match_temp_11, _coconut.tuple):  #67 (line in Coconut source)
                                raise _coconut.TypeError("RGB.__match_args__ must be a tuple")  #67 (line in Coconut source)
                            if _coconut.len(_coconut_match_temp_11) < 3:  #67 (line in Coconut source)
                                raise _coconut.TypeError("too many positional args in class match (pattern requires 3; 'RGB' only supports %s)" % (_coconut.len(_coconut_match_temp_11),))  #67 (line in Coconut source)
                            _coconut_match_temp_12 = _coconut.getattr(_coconut_case_match_to_1, _coconut_match_temp_11[0], _coconut_sentinel)  #67 (line in Coconut source)
                            _coconut_match_temp_13 = _coconut.getattr(_coconut_case_match_to_1, _coconut_match_temp_11[1], _coconut_sentinel)  #67 (line in Coconut source)
                            _coconut_match_temp_14 = _coconut.getattr(_coconut_case_match_to_1, _coconut_match_temp_11[2], _coconut_sentinel)  #67 (line in Coconut source)
                            if (_coconut_match_temp_12 is not _coconut_sentinel) and (_coconut_match_temp_13 is not _coconut_sentinel) and (_coconut_match_temp_14 is not _coconut_sentinel):  #67 (line in Coconut source)
                                _coconut_match_set_name_red = _coconut_match_temp_12  #67 (line in Coconut source)
                                _coconut_match_set_name_green = _coconut_match_temp_13  #67 (line in Coconut source)
                                _coconut_match_set_name_blue = _coconut_match_temp_14  #67 (line in Coconut source)
                                _coconut_case_match_check_1 = True  #67 (line in Coconut source)
                        if _coconut_case_match_check_1:  #67 (line in Coconut source)
                            if _coconut_match_set_name_red is not _coconut_sentinel:  #67 (line in Coconut source)
                                red = _coconut_match_set_name_red  #67 (line in Coconut source)
                            if _coconut_match_set_name_green is not _coconut_sentinel:  #67 (line in Coconut source)
                                green = _coconut_match_set_name_green  #67 (line in Coconut source)
                            if _coconut_match_set_name_blue is not _coconut_sentinel:  #67 (line in Coconut source)
                                blue = _coconut_match_set_name_blue  #67 (line in Coconut source)




        if _coconut_case_match_check_1:  #67 (line in Coconut source)
            if _coconut_match_set_name_rgb is not _coconut_sentinel:  #67 (line in Coconut source)
                rgb = _coconut_match_set_name_rgb  #67 (line in Coconut source)
        if _coconut_case_match_check_1:  #67 (line in Coconut source)
            return rgb  #68 (line in Coconut source)
    if not _coconut_case_match_check_1:  #69 (line in Coconut source)
        _coconut_match_temp_15 = _coconut.getattr(HSV, "_coconut_is_data", False) or _coconut.isinstance(HSV, _coconut.tuple) and _coconut.all(_coconut.getattr(_coconut_x, "_coconut_is_data", False) for _coconut_x in HSV)  # type: ignore  #69 (line in Coconut source)
        _coconut_case_match_check_1 = True  #69 (line in Coconut source)
        if _coconut_case_match_check_1:  #69 (line in Coconut source)
            _coconut_case_match_check_1 = False  #69 (line in Coconut source)
            if not _coconut_case_match_check_1:  #69 (line in Coconut source)
                _coconut_match_set_name_hue = _coconut_sentinel  #69 (line in Coconut source)
                _coconut_match_set_name_saturation = _coconut_sentinel  #69 (line in Coconut source)
                _coconut_match_set_name_value = _coconut_sentinel  #69 (line in Coconut source)
                if (_coconut_match_temp_15) and (_coconut.isinstance(_coconut_case_match_to_1, HSV)) and (_coconut.len(_coconut_case_match_to_1) >= 3):  #69 (line in Coconut source)
                    _coconut_match_set_name_hue = _coconut_case_match_to_1[0]  #69 (line in Coconut source)
                    _coconut_match_set_name_saturation = _coconut_case_match_to_1[1]  #69 (line in Coconut source)
                    _coconut_match_set_name_value = _coconut_case_match_to_1[2]  #69 (line in Coconut source)
                    _coconut_match_temp_16 = _coconut.len(_coconut_case_match_to_1) <= _coconut.max(3, _coconut.len(_coconut_case_match_to_1.__match_args__)) and _coconut.all(i in _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {}) and _coconut_case_match_to_1[i] == _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {})[i] for i in _coconut.range(3, _coconut.len(_coconut_case_match_to_1.__match_args__))) if _coconut.hasattr(_coconut_case_match_to_1, "__match_args__") else _coconut.len(_coconut_case_match_to_1) == 3  # type: ignore  #69 (line in Coconut source)
                    if _coconut_match_temp_16:  #69 (line in Coconut source)
                        _coconut_case_match_check_1 = True  #69 (line in Coconut source)
                if _coconut_case_match_check_1:  #69 (line in Coconut source)
                    if _coconut_match_set_name_hue is not _coconut_sentinel:  #69 (line in Coconut source)
                        hue = _coconut_match_set_name_hue  #69 (line in Coconut source)
                    if _coconut_match_set_name_saturation is not _coconut_sentinel:  #69 (line in Coconut source)
                        saturation = _coconut_match_set_name_saturation  #69 (line in Coconut source)
                    if _coconut_match_set_name_value is not _coconut_sentinel:  #69 (line in Coconut source)
                        value = _coconut_match_set_name_value  #69 (line in Coconut source)

            if not _coconut_case_match_check_1:  #69 (line in Coconut source)
                if (not _coconut_match_temp_15) and (_coconut.isinstance(_coconut_case_match_to_1, HSV)):  #69 (line in Coconut source)
                    _coconut_case_match_check_1 = True  #69 (line in Coconut source)
                if _coconut_case_match_check_1:  #69 (line in Coconut source)
                    _coconut_case_match_check_1 = False  #69 (line in Coconut source)
                    if not _coconut_case_match_check_1:  #69 (line in Coconut source)
                        if _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #69 (line in Coconut source)
                            raise _coconut.TypeError("too many positional args in class match (pattern requires 3; 'HSV' only supports 1)")  #69 (line in Coconut source)
                            _coconut_case_match_check_1 = True  #69 (line in Coconut source)

                    if not _coconut_case_match_check_1:  #69 (line in Coconut source)
                        _coconut_match_set_name_hue = _coconut_sentinel  #69 (line in Coconut source)
                        _coconut_match_set_name_saturation = _coconut_sentinel  #69 (line in Coconut source)
                        _coconut_match_set_name_value = _coconut_sentinel  #69 (line in Coconut source)
                        if not _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #69 (line in Coconut source)
                            _coconut_match_temp_17 = _coconut.getattr(HSV, '__match_args__', ())  # type: _coconut.typing.Any  # type: ignore  #69 (line in Coconut source)
                            if not _coconut.isinstance(_coconut_match_temp_17, _coconut.tuple):  #69 (line in Coconut source)
                                raise _coconut.TypeError("HSV.__match_args__ must be a tuple")  #69 (line in Coconut source)
                            if _coconut.len(_coconut_match_temp_17) < 3:  #69 (line in Coconut source)
                                raise _coconut.TypeError("too many positional args in class match (pattern requires 3; 'HSV' only supports %s)" % (_coconut.len(_coconut_match_temp_17),))  #69 (line in Coconut source)
                            _coconut_match_temp_18 = _coconut.getattr(_coconut_case_match_to_1, _coconut_match_temp_17[0], _coconut_sentinel)  #69 (line in Coconut source)
                            _coconut_match_temp_19 = _coconut.getattr(_coconut_case_match_to_1, _coconut_match_temp_17[1], _coconut_sentinel)  #69 (line in Coconut source)
                            _coconut_match_temp_20 = _coconut.getattr(_coconut_case_match_to_1, _coconut_match_temp_17[2], _coconut_sentinel)  #69 (line in Coconut source)
                            if (_coconut_match_temp_18 is not _coconut_sentinel) and (_coconut_match_temp_19 is not _coconut_sentinel) and (_coconut_match_temp_20 is not _coconut_sentinel):  #69 (line in Coconut source)
                                _coconut_match_set_name_hue = _coconut_match_temp_18  #69 (line in Coconut source)
                                _coconut_match_set_name_saturation = _coconut_match_temp_19  #69 (line in Coconut source)
                                _coconut_match_set_name_value = _coconut_match_temp_20  #69 (line in Coconut source)
                                _coconut_case_match_check_1 = True  #69 (line in Coconut source)
                        if _coconut_case_match_check_1:  #69 (line in Coconut source)
                            if _coconut_match_set_name_hue is not _coconut_sentinel:  #69 (line in Coconut source)
                                hue = _coconut_match_set_name_hue  #69 (line in Coconut source)
                            if _coconut_match_set_name_saturation is not _coconut_sentinel:  #69 (line in Coconut source)
                                saturation = _coconut_match_set_name_saturation  #69 (line in Coconut source)
                            if _coconut_match_set_name_value is not _coconut_sentinel:  #69 (line in Coconut source)
                                value = _coconut_match_set_name_value  #69 (line in Coconut source)




        if _coconut_case_match_check_1:  #69 (line in Coconut source)
            return _coconut_tail_call(hsv_to_rgb, hue, saturation, value)  #70 (line in Coconut source)
    if not _coconut_case_match_check_1:  #71 (line in Coconut source)
        _coconut_match_set_name_b = _coconut_sentinel  #71 (line in Coconut source)
        _coconut_match_set_name_b = _coconut_case_match_to_1  #71 (line in Coconut source)
        _coconut_match_temp_21 = _coconut.getattr(BasicColor, "_coconut_is_data", False) or _coconut.isinstance(BasicColor, _coconut.tuple) and _coconut.all(_coconut.getattr(_coconut_x, "_coconut_is_data", False) for _coconut_x in BasicColor)  # type: ignore  #71 (line in Coconut source)
        _coconut_case_match_check_1 = True  #71 (line in Coconut source)
        if _coconut_case_match_check_1:  #71 (line in Coconut source)
            _coconut_case_match_check_1 = False  #71 (line in Coconut source)
            if not _coconut_case_match_check_1:  #71 (line in Coconut source)
                if (_coconut_match_temp_21) and (_coconut.isinstance(_coconut_case_match_to_1, BasicColor)):  #71 (line in Coconut source)
                    _coconut_match_temp_22 = _coconut.len(_coconut_case_match_to_1) <= _coconut.max(0, _coconut.len(_coconut_case_match_to_1.__match_args__)) and _coconut.all(i in _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {}) and _coconut_case_match_to_1[i] == _coconut.getattr(_coconut_case_match_to_1, "_coconut_data_defaults", {})[i] for i in _coconut.range(0, _coconut.len(_coconut_case_match_to_1.__match_args__))) if _coconut.hasattr(_coconut_case_match_to_1, "__match_args__") else _coconut.len(_coconut_case_match_to_1) == 0  # type: ignore  #71 (line in Coconut source)
                    if _coconut_match_temp_22:  #71 (line in Coconut source)
                        _coconut_case_match_check_1 = True  #71 (line in Coconut source)

            if not _coconut_case_match_check_1:  #71 (line in Coconut source)
                if (not _coconut_match_temp_21) and (_coconut.isinstance(_coconut_case_match_to_1, BasicColor)):  #71 (line in Coconut source)
                    _coconut_case_match_check_1 = True  #71 (line in Coconut source)
                if _coconut_case_match_check_1:  #71 (line in Coconut source)
                    _coconut_case_match_check_1 = False  #71 (line in Coconut source)
                    if not _coconut_case_match_check_1:  #71 (line in Coconut source)
                        if _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #71 (line in Coconut source)
                            _coconut_case_match_check_1 = True  #71 (line in Coconut source)

                    if not _coconut_case_match_check_1:  #71 (line in Coconut source)
                        if not _coconut.type(_coconut_case_match_to_1) in _coconut_self_match_types:  #71 (line in Coconut source)
                            _coconut_match_temp_23 = _coconut.getattr(BasicColor, '__match_args__', ())  # type: _coconut.typing.Any  # type: ignore  #71 (line in Coconut source)
                            if not _coconut.isinstance(_coconut_match_temp_23, _coconut.tuple):  #71 (line in Coconut source)
                                raise _coconut.TypeError("BasicColor.__match_args__ must be a tuple")  #71 (line in Coconut source)
                            if _coconut.len(_coconut_match_temp_23) < 0:  #71 (line in Coconut source)
                                raise _coconut.TypeError("too many positional args in class match (pattern requires 0; 'BasicColor' only supports %s)" % (_coconut.len(_coconut_match_temp_23),))  #71 (line in Coconut source)
                            _coconut_case_match_check_1 = True  #71 (line in Coconut source)




        if _coconut_case_match_check_1:  #71 (line in Coconut source)
            if _coconut_match_set_name_b is not _coconut_sentinel:  #71 (line in Coconut source)
                b = _coconut_match_set_name_b  #71 (line in Coconut source)
        if _coconut_case_match_check_1:  #71 (line in Coconut source)
            return _coconut_tail_call(RGB, *b.value)  #72 (line in Coconut source)
    if not _coconut_case_match_check_1:  #73 (line in Coconut source)
        return _coconut_tail_call("Invalid color {_coconut_format_0}".format, _coconut_format_0=(color))  #74 (line in Coconut source)


# otestování jednotlivých možností


print("Grayscale:")  #79 (line in Coconut source)

(print)((to_rgb)(Gray(0)))  #81 (line in Coconut source)
(print)((to_rgb)(Gray(255)))  #82 (line in Coconut source)

print("\nRGB:")  #84 (line in Coconut source)

(print)((to_rgb)(RGB(0, 0, 0)))  #86 (line in Coconut source)
(print)((to_rgb)(RGB(0, 255, 0)))  #87 (line in Coconut source)
(print)((to_rgb)(RGB(255, 255, 255)))  #88 (line in Coconut source)

print("\nHSV:")  #90 (line in Coconut source)

(print)((to_rgb)(HSV(0.0, 0.0, 1.0)))  #92 (line in Coconut source)
(print)((to_rgb)(HSV(0.0, 0.0, 0.5)))  #93 (line in Coconut source)
(print)((to_rgb)(HSV(0.0, 1.0, 1.0)))  #94 (line in Coconut source)
(print)((to_rgb)(HSV(0.3333, 1.0, 1.0)))  #95 (line in Coconut source)
(print)((to_rgb)(HSV(0.6666, 1.0, 1.0)))  #96 (line in Coconut source)
(print)((to_rgb)(HSV(1.0, 1.0, 1.0)))  #97 (line in Coconut source)
(print)((to_rgb)(HSV(1.0, 0.5, 0.5)))  #98 (line in Coconut source)
(print)((to_rgb)(HSV(1.0, 0.0, 1.0)))  #99 (line in Coconut source)

print("\nBasic colors:")  #101 (line in Coconut source)

(print)((to_rgb)(BasicColor.BLACK))  #103 (line in Coconut source)
(print)((to_rgb)(BasicColor.RED))  #104 (line in Coconut source)
(print)((to_rgb)(BasicColor.GREEN))  #105 (line in Coconut source)
(print)((to_rgb)(BasicColor.BLUE))  #106 (line in Coconut source)
(print)((to_rgb)(BasicColor.YELLOW))  #107 (line in Coconut source)
(print)((to_rgb)(BasicColor.MAGENTA))  #108 (line in Coconut source)
(print)((to_rgb)(BasicColor.CYAN))  #109 (line in Coconut source)
(print)((to_rgb)(BasicColor.WHITE))  #110 (line in Coconut source)
