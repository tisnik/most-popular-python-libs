TokenInfo(type=60 (COMMENT), string='# originální kód lze nalézt na adrese:', start=(1, 0), end=(1, 38), line='# originální kód lze nalézt na adrese:\n')
TokenInfo(type=61 (NL), string='\n', start=(1, 38), end=(1, 39), line='# originální kód lze nalézt na adrese:\n')
TokenInfo(type=60 (COMMENT), string='# http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup', start=(2, 0), end=(2, 74), line='# http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup\n')
TokenInfo(type=61 (NL), string='\n', start=(2, 74), end=(2, 75), line='# http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup\n')
TokenInfo(type=1 (NAME), string='def', start=(3, 0), end=(3, 3), line='def primes2(limit):\n')
TokenInfo(type=1 (NAME), string='primes2', start=(3, 4), end=(3, 11), line='def primes2(limit):\n')
TokenInfo(type=54 (OP), string='(', start=(3, 11), end=(3, 12), line='def primes2(limit):\n')
TokenInfo(type=1 (NAME), string='limit', start=(3, 12), end=(3, 17), line='def primes2(limit):\n')
TokenInfo(type=54 (OP), string=')', start=(3, 17), end=(3, 18), line='def primes2(limit):\n')
TokenInfo(type=54 (OP), string=':', start=(3, 18), end=(3, 19), line='def primes2(limit):\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(3, 19), end=(3, 20), line='def primes2(limit):\n')
TokenInfo(type=5 (INDENT), string='    ', start=(4, 0), end=(4, 4), line='    """Výpočet seznamu prvočísel až do zadaného limitu."""\n')
TokenInfo(type=3 (STRING), string='"""Výpočet seznamu prvočísel až do zadaného limitu."""', start=(4, 4), end=(4, 58), line='    """Výpočet seznamu prvočísel až do zadaného limitu."""\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(4, 58), end=(4, 59), line='    """Výpočet seznamu prvočísel až do zadaného limitu."""\n')
TokenInfo(type=1 (NAME), string='is_prime', start=(5, 4), end=(5, 12), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='=', start=(5, 13), end=(5, 14), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='[', start=(5, 15), end=(5, 16), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=1 (NAME), string='False', start=(5, 16), end=(5, 21), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string=']', start=(5, 21), end=(5, 22), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='*', start=(5, 23), end=(5, 24), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=2 (NUMBER), string='2', start=(5, 25), end=(5, 26), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='+', start=(5, 27), end=(5, 28), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='[', start=(5, 29), end=(5, 30), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=1 (NAME), string='True', start=(5, 30), end=(5, 34), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string=']', start=(5, 34), end=(5, 35), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='*', start=(5, 36), end=(5, 37), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='(', start=(5, 38), end=(5, 39), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=1 (NAME), string='limit', start=(5, 39), end=(5, 44), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string='-', start=(5, 45), end=(5, 46), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=2 (NUMBER), string='1', start=(5, 47), end=(5, 48), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=54 (OP), string=')', start=(5, 48), end=(5, 49), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(5, 49), end=(5, 50), line='    is_prime = [False] * 2 + [True] * (limit - 1)\n')
TokenInfo(type=1 (NAME), string='for', start=(6, 4), end=(6, 7), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=1 (NAME), string='n', start=(6, 8), end=(6, 9), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=1 (NAME), string='in', start=(6, 10), end=(6, 12), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=1 (NAME), string='range', start=(6, 13), end=(6, 18), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=54 (OP), string='(', start=(6, 18), end=(6, 19), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=1 (NAME), string='int', start=(6, 19), end=(6, 22), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=54 (OP), string='(', start=(6, 22), end=(6, 23), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=1 (NAME), string='limit', start=(6, 23), end=(6, 28), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=54 (OP), string='**', start=(6, 28), end=(6, 30), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=2 (NUMBER), string='0.5', start=(6, 30), end=(6, 33), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=54 (OP), string='+', start=(6, 34), end=(6, 35), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=2 (NUMBER), string='1.5', start=(6, 36), end=(6, 39), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=54 (OP), string=')', start=(6, 39), end=(6, 40), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=54 (OP), string=')', start=(6, 40), end=(6, 41), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=54 (OP), string=':', start=(6, 41), end=(6, 42), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=60 (COMMENT), string='# stop at ``sqrt(limit)``', start=(6, 44), end=(6, 69), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(6, 69), end=(6, 70), line='    for n in range(int(limit**0.5 + 1.5)):  # stop at ``sqrt(limit)``\n')
TokenInfo(type=5 (INDENT), string='        ', start=(7, 0), end=(7, 8), line='        if is_prime[n]:\n')
TokenInfo(type=1 (NAME), string='if', start=(7, 8), end=(7, 10), line='        if is_prime[n]:\n')
TokenInfo(type=1 (NAME), string='is_prime', start=(7, 11), end=(7, 19), line='        if is_prime[n]:\n')
TokenInfo(type=54 (OP), string='[', start=(7, 19), end=(7, 20), line='        if is_prime[n]:\n')
TokenInfo(type=1 (NAME), string='n', start=(7, 20), end=(7, 21), line='        if is_prime[n]:\n')
TokenInfo(type=54 (OP), string=']', start=(7, 21), end=(7, 22), line='        if is_prime[n]:\n')
TokenInfo(type=54 (OP), string=':', start=(7, 22), end=(7, 23), line='        if is_prime[n]:\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(7, 23), end=(7, 24), line='        if is_prime[n]:\n')
TokenInfo(type=5 (INDENT), string='            ', start=(8, 0), end=(8, 12), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='for', start=(8, 12), end=(8, 15), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='i', start=(8, 16), end=(8, 17), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='in', start=(8, 18), end=(8, 20), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='range', start=(8, 21), end=(8, 26), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=54 (OP), string='(', start=(8, 26), end=(8, 27), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='n', start=(8, 27), end=(8, 28), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=54 (OP), string='*', start=(8, 28), end=(8, 29), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='n', start=(8, 29), end=(8, 30), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=54 (OP), string=',', start=(8, 30), end=(8, 31), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='limit', start=(8, 32), end=(8, 37), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=54 (OP), string='+', start=(8, 37), end=(8, 38), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=2 (NUMBER), string='1', start=(8, 38), end=(8, 39), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=54 (OP), string=',', start=(8, 39), end=(8, 40), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=1 (NAME), string='n', start=(8, 41), end=(8, 42), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=54 (OP), string=')', start=(8, 42), end=(8, 43), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=54 (OP), string=':', start=(8, 43), end=(8, 44), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(8, 44), end=(8, 45), line='            for i in range(n*n, limit+1, n):\n')
TokenInfo(type=5 (INDENT), string='                ', start=(9, 0), end=(9, 16), line='                is_prime[i] = False\n')
TokenInfo(type=1 (NAME), string='is_prime', start=(9, 16), end=(9, 24), line='                is_prime[i] = False\n')
TokenInfo(type=54 (OP), string='[', start=(9, 24), end=(9, 25), line='                is_prime[i] = False\n')
TokenInfo(type=1 (NAME), string='i', start=(9, 25), end=(9, 26), line='                is_prime[i] = False\n')
TokenInfo(type=54 (OP), string=']', start=(9, 26), end=(9, 27), line='                is_prime[i] = False\n')
TokenInfo(type=54 (OP), string='=', start=(9, 28), end=(9, 29), line='                is_prime[i] = False\n')
TokenInfo(type=1 (NAME), string='False', start=(9, 30), end=(9, 35), line='                is_prime[i] = False\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(9, 35), end=(9, 36), line='                is_prime[i] = False\n')
TokenInfo(type=6 (DEDENT), string='', start=(10, 4), end=(10, 4), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=6 (DEDENT), string='', start=(10, 4), end=(10, 4), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=6 (DEDENT), string='', start=(10, 4), end=(10, 4), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='return', start=(10, 4), end=(10, 10), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=54 (OP), string='[', start=(10, 11), end=(10, 12), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='i', start=(10, 12), end=(10, 13), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='for', start=(10, 14), end=(10, 17), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='i', start=(10, 18), end=(10, 19), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=54 (OP), string=',', start=(10, 19), end=(10, 20), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='prime', start=(10, 21), end=(10, 26), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='in', start=(10, 27), end=(10, 29), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='enumerate', start=(10, 30), end=(10, 39), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=54 (OP), string='(', start=(10, 39), end=(10, 40), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='is_prime', start=(10, 40), end=(10, 48), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=54 (OP), string=')', start=(10, 48), end=(10, 49), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='if', start=(10, 50), end=(10, 52), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=1 (NAME), string='prime', start=(10, 53), end=(10, 58), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=54 (OP), string=']', start=(10, 58), end=(10, 59), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(10, 59), end=(10, 60), line='    return [i for i, prime in enumerate(is_prime) if prime]\n')
TokenInfo(type=61 (NL), string='\n', start=(11, 0), end=(11, 1), line='\n')
TokenInfo(type=61 (NL), string='\n', start=(12, 0), end=(12, 1), line='\n')
TokenInfo(type=6 (DEDENT), string='', start=(13, 0), end=(13, 0), line='print(primes2(100))\n')
TokenInfo(type=1 (NAME), string='print', start=(13, 0), end=(13, 5), line='print(primes2(100))\n')
TokenInfo(type=54 (OP), string='(', start=(13, 5), end=(13, 6), line='print(primes2(100))\n')
TokenInfo(type=1 (NAME), string='primes2', start=(13, 6), end=(13, 13), line='print(primes2(100))\n')
TokenInfo(type=54 (OP), string='(', start=(13, 13), end=(13, 14), line='print(primes2(100))\n')
TokenInfo(type=2 (NUMBER), string='100', start=(13, 14), end=(13, 17), line='print(primes2(100))\n')
TokenInfo(type=54 (OP), string=')', start=(13, 17), end=(13, 18), line='print(primes2(100))\n')
TokenInfo(type=54 (OP), string=')', start=(13, 18), end=(13, 19), line='print(primes2(100))\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(13, 19), end=(13, 20), line='print(primes2(100))\n')
TokenInfo(type=0 (ENDMARKER), string='', start=(14, 0), end=(14, 0), line='')
