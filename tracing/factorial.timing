 --- modulename: factorial, funcname: <module>
0.00 factorial.py(1): """Výpočet faktoriálu."""
0.00 factorial.py(4): def factorial(n):
0.00 factorial.py(18): def main():
0.00 factorial.py(23): if __name__ == "__main__":
0.00 factorial.py(24):     main()
 --- modulename: factorial, funcname: main
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0 1
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
1 1
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
2 2
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
3 6
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
4 24
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
5 120
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
6 720
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
7 5040
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
8 40320
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
9 362880
0.00 factorial.py(19):     for n in range(0, 11):
0.00 factorial.py(20):         print(n, factorial(n))
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(12):     result = n * factorial(n-1)
 --- modulename: factorial, funcname: factorial
0.00 factorial.py(6):     assert isinstance(n, int), "Integer expected"
0.00 factorial.py(8):     if n < 0:
0.00 factorial.py(10):     if n == 0:
0.00 factorial.py(11):         return 1
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
0.00 factorial.py(14):     assert isinstance(result, int), "Internal error in factorial computation"
0.00 factorial.py(15):     return result
10 3628800
0.00 factorial.py(19):     for n in range(0, 11):
 --- modulename: trace, funcname: _unsettrace
0.00 trace.py(77):         sys.settrace(None)
